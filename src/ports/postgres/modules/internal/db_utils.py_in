# coding=utf-8
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

import plpy
from utilities.utilities import is_psql_char_type
from utilities.validate_args import get_expr_type

m4_changequote(`<!', `!>')

QUOTE_DELIMITER="$__madlib__$"


def get_distinct_col_levels(source_table, col_name, col_type=None):
    """
    Add description here
    :return:
    """
    if not col_type:
        col_type = get_expr_type(col_name, source_table)

    if is_psql_char_type(col_type):
        dep_var_text_patched = "quote_literal({0})".format(col_name)
    else:
        dep_var_text_patched = col_name

    levels = plpy.execute("""
                SELECT DISTINCT {dep_var_text_patched} AS levels
                FROM {source_table}
                WHERE ({col_name}) is NOT NULL
                """.format(**locals()))

    levels = sorted(l["levels"] for l in levels)
    return levels


def get_one_hot_encoded_expr(col_name, col_levels):
    """
    All the values in col_levels should have been quoted and escaped with
    the sql function `quote_literal`.
    :param col_name:
    :param col_levels:
    :return:
    """
    one_hot_encoded_expr = ["({0}) = {1}".format(col_name, c)
                            for c in col_levels]
    return 'ARRAY[{0}]::INTEGER[]'.format(', '.join(one_hot_encoded_expr))
# ------------------------------------------------------------------------------


def quote_literal(input_str, delimiter=QUOTE_DELIMITER):
    """ Return the given string suitably quoted to be used as a string literal
        in an SQL statement string.

        The plpy.quote_literal is not available in GPDB 4.3 - this function is
        provided as a proxy for that platform. For all other platforms this
        function, forwards the argument to plpy.quote_literal.
    """
    try:
        return plpy.quote_literal(input_str)
    except AttributeError:
        # plpy.quote_literal is not supported, we work around by returning
        # dollar-quoted string with obscure tag
        return "{qd}{input_str}{qd}".format(qd=delimiter,
                                            input_str=input_str)
# ------------------------------------------------------------------------------

def is_col_1d_array(source_table, col_name):
    query = """
        SELECT array_upper({0}, 2) IS NULL AS n_y
        FROM {1}
        LIMIT 1
    """.format(col_name, source_table)
    result = plpy.execute(query)
    return result[0]["n_y"]

# ------------------------------------------------------------------------------
def quote_dict_values(input_dict, exclude_keys, delimiter):
    for key in input_dict:
        if key in exclude_keys:
            continue
        input_dict[key] = quote_literal(input_dict[key], delimiter)\
            if input_dict[key] else "NULL"