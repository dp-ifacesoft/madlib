# coding=utf-8
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

import sys
from os import path
# Add convex module to the pythonpath.
sys.path.append(path.dirname(path.dirname(path.dirname(path.dirname(path.abspath(__file__))))))
sys.path.append(path.dirname(path.dirname(path.dirname(path.abspath(__file__)))))


import unittest
from mock import *
import plpy_mock as plpy

m4_changequote(`<!', `!>')

class VersionedModelTableValidatorTestCase(unittest.TestCase):
    def setUp(self):
        self.plpy_mock = Mock(spec='error')
        patches = {
            'plpy': plpy,
        }

        self.plpy_mock_execute = MagicMock()
        plpy.execute = self.plpy_mock_execute

        self.module_patcher = patch.dict('sys.modules', patches)
        self.module_patcher.start()

        self.model_view = 'model_view'
        self.model_repo_table = 'repo_table'
        self.model_id = 1
        import internal.model_versioning
        self.module = internal.model_versioning

    def tearDown(self):
        self.module_patcher.stop()

    def test_init(self):
        with self.assertRaises(plpy.PLPYException):
            validator_obj = self.module.VersionedModelTableValidator(None)
        with self.assertRaises(plpy.PLPYException):
            validator_obj = self.module.VersionedModelTableValidator(self.model_repo_table, None)
        with self.assertRaises(plpy.PLPYException):
            validator_obj = self.module.VersionedModelTableValidator(None,
                self.model_id)
        validator_obj = self.module.VersionedModelTableValidator(self.model_repo_table, self.model_id)
        validator_obj = self.module.VersionedModelTableValidator(self.model_view)

    # def test_validate_model_tables_for_train(self):


    # def test_validate_model_repo_tables_exits(self):
    #     pass

class AnyStringWith(str):
    def __eq__(self, other):
        return self in other


if __name__ == '__main__':
    unittest.main()

# ---------------------------------------------------------------------
