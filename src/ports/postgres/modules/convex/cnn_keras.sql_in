/* ----------------------------------------------------------------------- *//**
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 *
 * @file mlp.sql_in
 *
 * @brief SQL functions for multilayer perceptron
 * @date June 2012
 *
 *
 *//* ----------------------------------------------------------------------- */

m4_include(`SQLCommon.m4')

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.run_keras(
    source_table text,
    test_table text,
    model_table text,
    n_iter  int
)
RETURNS VOID AS $$
    N_ITERATIONS = n_iter

    import plpy
    import keras
    import numpy as np
    import pandas as pd
    import time
    import os
    import sys
    import gc

    from keras.models import Sequential
    from keras.datasets import mnist, cifar10
    from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, ZeroPadding2D, Activation
    from keras.optimizers import Adam, SGD
    from keras import backend as K
    from keras.regularizers import l2
    from keras.layers import Input
    from keras.applications.imagenet_utils import _obtain_input_shape
    from keras.models import Model
    from keras.models import model_from_json

    os.environ['CUDA_VISIBLE_DEVICES'] = '-1'  # to disable GPU

    n_classes = 10 

    def deserialize(state,model_shapes):
        weightsList = []
        j = 0
        for a in filter(None,state.split('splitter')):
            arr = np.fromstring(a, dtype=np.float32)
            weightsList.append(arr.reshape(model_shapes[j]))
            j+=1

        return weightsList

    def create_model_architecture(n_classes,config='A'):
        model = Sequential()

        # Determine proper input shape
        input_shape = (224,224,3)
        input_shape = _obtain_input_shape(input_shape,
                                      default_size=224,
                                      min_size=48,
                                      data_format=K.image_data_format(),
                                      require_flatten=True)

        inputs = Input(shape=input_shape)

        # Block 1
        x = Conv2D(filters=64, kernel_size=3, strides=(1, 1), padding='same',
                   kernel_regularizer=l2(0.0002),
                   activation='relu', name='block1_conv1')(inputs)

        if (config != 'A'):
            x = Conv2D(filters=64, kernel_size=3, strides=(1, 1), padding='same',
                   kernel_regularizer=l2(0.0002),
                   activation='relu', name='block1_conv2')(x)

        x = MaxPooling2D(pool_size=(2, 2), strides=(2, 2), name="block1_pool", padding='valid')(x)

        # Block 2
        x = Conv2D(filters=128, kernel_size=3, strides=(1, 1), padding='same',
                   kernel_regularizer=l2(0.0002),
                   activation='relu', name='block2_conv1')(x)

        if (config != 'A'):
            x = Conv2D(filters=128, kernel_size=3, strides=(1, 1), padding='same',
                   kernel_regularizer=l2(0.0002),
                   activation='relu', name='block2_conv2')(x)

        x = MaxPooling2D(pool_size=(2, 2), strides=(2, 2), name="block2_pool", padding='valid')(x)

        # Block 3
        x = Conv2D(filters=256, kernel_size=3, strides=(1, 1), padding='same',
                   kernel_regularizer=l2(0.0002),
                   activation='relu', name='block3_conv1')(x)

        x = Conv2D(filters=256, kernel_size=3, strides=(1, 1), padding='same',
                   kernel_regularizer=l2(0.0002),
                   activation='relu', name='block3_conv2')(x)

        if (config != 'A' and config != 'B'):
            if config == 'C':
                ks = 1 
            else:
                ks = 3
                x = Conv2D(filters=256, kernel_size=ks, strides=(1, 1), padding='same',
                   kernel_regularizer=l2(0.0002),
                   activation='relu', name='block3_conv3')(x)

        if (config == 'E'):
            x = Conv2D(filters=256, kernel_size=ks, strides=(1, 1), padding='same',
                kernel_regularizer=l2(0.0002),
                activation='relu', name='block3_conv3')(x)
   
        x = MaxPooling2D(pool_size=(2, 2), strides=(2, 2), name="block3_pool", padding='valid')(x)

        # Block 4
        x = Conv2D(filters=512, kernel_size=3, strides=(1, 1), padding='same',
                   kernel_regularizer=l2(0.0002),
                   activation='relu', name='block4_conv1')(x)

        x = Conv2D(filters=512, kernel_size=3, strides=(1, 1), padding='same',
                   kernel_regularizer=l2(0.0002),
                   activation='relu', name='block4_conv2')(x)

        if (config != 'A' and config != 'B'):
            if config == 'C':
                ks = 1 
            else:
                ks = 3
            x = Conv2D(filters=512, kernel_size=ks, strides=(1, 1), padding='same',
                       kernel_regularizer=l2(0.0002),
                       activation='relu', name='block4_conv3')(x)

            if config == 'E':
                x = Conv2D(filters=512, kernel_size=ks, strides=(1, 1), padding='same',
                       kernel_regularizer=l2(0.0002),
                       activation='relu', name='block4_conv3')(x)

        x = MaxPooling2D(pool_size=(2, 2), strides=(2, 2), name="block4_pool", padding='valid')(x)

        # Block 5

        if (config != 'A' and config != 'B'):
            if config == 'C':
                ks = 1 
            else:
                ks = 3
            x = Conv2D(filters=512, kernel_size=ks, strides=(1, 1), padding='same',
                       kernel_regularizer=l2(0.0002),
                       activation='relu', name='block4_conv3')(x)

            if config == 'E':
                x = Conv2D(filters=512, kernel_size=ks, strides=(1, 1), padding='same',
                       kernel_regularizer=l2(0.0002),
                       activation='relu', name='block4_conv3')(x)

        x = MaxPooling2D(pool_size=(2, 2), strides=(2, 2), name="block5_pool", padding='valid')(x)

        # Classification block
        x = Flatten(name='flatten')(x)
        x = Dense(4096, activation='relu', name='fc1')(x)
        x = Dropout(0.5, name='drop_fc1')(x)

        x = Dense(4096, activation='relu', name='fc2')(x)
        x = Dropout(0.5, name='drop_fc2')(x)

        x = Dense(n_classes, activation='softmax', name="predictions")(x)

        model = Model(inputs, x, name='vgg16-places365')

        sgd = SGD(lr=0.01, decay=1e-6, nesterov=True)
        model.summary()

        model.compile(optimizer=sgd, loss='categorical_crossentropy', metrics=['accuracy'])

        return model

    model = create_model_architecture(n_classes)

    sql_test_x = """
    SELECT x, y FROM {0} LIMIT 500""".format(test_table)
    plpy.info('Test sql is : {0}'.format(sql_test_x))
    testData = plpy.execute(sql_test_x)
    plpy.info('finished running select query')
    after_select = time.time();

    all_x_test = np.ndarray((0,5,150528))
    all_y_test = np.ndarray((0,5))
    for i in range(len(testData)):
        x_test = np.asarray((testData[i]['x'],))
        y_test = np.asarray((testData[i]['y'],))
        if i < 2:
            plpy.info('i : {0}'.format(i))
            plpy.info('X shape : {0}'.format(x_test.shape))
            plpy.info('Y shape : {0}'.format(y_test.shape))
        all_x_test=np.concatenate((all_x_test, x_test))
        all_y_test=np.concatenate((all_y_test, y_test))

    num_test_examples = all_x_test.shape[0]
    all_x_test = all_x_test.reshape(5*num_test_examples, 224,224,3)
    all_x_test = all_x_test.astype('float32')
    all_y_test = all_y_test.reshape(5*num_test_examples)
    plpy.info('X shape : {0}'.format(all_x_test.shape))
    plpy.info('Y shape : {0}'.format(all_y_test.shape))
    all_x_test /= 255.0
    all_y_test = keras.utils.to_categorical(all_y_test,n_classes)

    eval_start = time.time()
    plpy.info("Time to prepare test data = {}".format(eval_start - after_select));

    agg_score = model.evaluate(all_x_test, all_y_test,verbose=0)[1]
    eval_time = time.time()
    plpy.info("Time to evaluate model = {0}".format(eval_time-eval_start))
    plpy.info("Accuracy before any training = {0}".format(agg_score))

    agg_scores = []
    model_arch = model.to_json()
    sql = """
        SELECT MADLIB_SCHEMA.cnn_keras_step(
            x::REAL[],
            y::SMALLINT[],
            gp_segment_id,
            $MAD${0}$MAD$::text,
            $1
        ) AS keras_model
        FROM {1}
        """.format(model_arch, source_table)

    plpy.info("Model arch size: {}KB".format(len(model_arch)/1024))

    update_plan = plpy.prepare(sql, ["bytea"])
    plpy.info("model arch is in place")
    model_string = "0splitter"
    start_time = time.time()
    model_shapes = []
    for a in model.get_weights():
        model_string += a.tostring()
        model_string += 'splitter'
        model_shapes.append(a.shape)

    plpy.info("Model state size: {}MB".format(len(model_string)/1024/1024))
    start_time = time.time()
    for i in range(N_ITERATIONS):
        iter_start_time = time.time()
        try:
            model_string = plpy.execute(update_plan, [model_string])[0]['keras_model']
        except plpy.SPIError as e:
            plpy.notice(e)
            plpy.error('plpy exception')
        iter_endtime = time.time()
        plpy.info('Time for iteration {0}:{1}'.format(i, iter_endtime-iter_start_time))
        weightsList = []
        weightsList = deserialize(model_string,model_shapes)
        model_string = "0splitter" + model_string
        model.set_weights(weightsList)
        agg_score = model.evaluate(all_x_test, all_y_test, verbose=0)[1]
        plpy.info("Training categorical_accuracy in iteration {0} = {1}".format(i+1, agg_score))
        agg_scores.append(agg_score)

    plan = plpy.prepare("""
        drop table if exists {0};
        CREATE TABLE {0} AS
        SELECT $1 AS keras_model,
        $2 as accuracy_history
        """.format(model_table), ["text", "DOUBLE PRECISION[]"])
    plpy.execute(plan, [weightsList, agg_scores])


$$ language plpythonu;


CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.cnn_keras_transition(
    state               BYTEA,
    ind_var             REAL[],
    dep_var             SMALLINT[],
    seg                 INTEGER,
    architecture        TEXT,
    previous_state      BYTEA
) RETURNS BYTEA AS
$$

import plpy
import os

gpus_per_host=4
#device_name = '/gpu:{}'.format(seg % gpus_per_host)
device_name = '/gpu:0'

# Don't let tensorflow see anything but the 1 GPU we're supposed to use
os.environ["CUDA_VISIBLE_DEVICES"] = str(seg % gpus_per_host)

import numpy as np
import keras
import time
import gc
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, ZeroPadding2D, Activation
from keras.optimizers import Adam, SGD
from keras.models import model_from_json
from keras import backend as K
from tensorflow.python.client import device_lib

def transition_deserialize(state,model_shapes):
    weightsList = []
    j = 0
    split_state = filter(None,state.split('splitter'))
    for a in split_state[1:]:
        arr = np.fromstring(a, dtype=np.float32)
        weightsList.append(arr.reshape(model_shapes[j]))
        j+=1

    return int(split_state[0]),weightsList

real_start = time.time()


config = K.tf.ConfigProto()
config.gpu_options.allow_growth = False 
#  the following only lets tensorflow/keras see this specific GPU--no "with" contexts needed later
#config.gpu_options.visible_device_list = str(seg % gpus_per_host)
config.gpu_options.per_process_gpu_memory_fraction = 0.9
session = K.tf.Session(config=config)
K.set_session(session)

if not state:
    # model needs to be initialized
    serialized_state = previous_state
else:
    serialized_state = state
keras_model = model_from_json(architecture)
model_shapes = []

with K.tf.device(device_name):
    for a in keras_model.get_weights():
        model_shapes.append(a.shape)

start = time.time()
buffer_count,weightsList = transition_deserialize(serialized_state,model_shapes)
after_deser = time.time()
with K.tf.device(device_name):
    keras_model.set_weights(weightsList)

prep_1 = time.time()  # set weights

# We must run model.compile again, after obtaining the architecutre.
with K.tf.device(device_name):
    keras_model.compile(optimizer=SGD(lr=0.01, decay=1e-6, nesterov=True),
        loss='categorical_crossentropy', metrics=['accuracy'])

prep_3 = time.time() # compile()
if ind_var == None:
   return None
x_train = np.array(ind_var).reshape(len(ind_var), 224,224,3)
# Figure out why this is necessary, but IT IS necessary!
x_train /= 255.0
y_train = np.array(dep_var)
n_classes = 10 
mid = time.time() # convert x,y input to numpy arrays
y_train = keras.utils.to_categorical(y_train,n_classes)

with K.tf.device(device_name):
    keras_model.fit(x_train, y_train,
       batch_size=25,
       epochs=1,
       verbose=0)
end = time.time()
model_string = str(buffer_count+1) + 'splitter'
with K.tf.device(device_name):
    weights = keras_model.get_weights()

del keras_model
del weightsList
del x_train
del y_train
gc.collect()

sess = K.get_session()
K.clear_session()
sess.close()
del K
gc.collect()

for a in weights:
    model_string += a.tostring()
    model_string += "splitter"

del weights
gc.collect()

before_return = time.time()
plpy.info("DeSer ModelArch: {0}, DeSer ModelState: {1}, Prep: {2}, Fit: {3}, Ser ModelState: {4}".format(start-real_start,after_deser-start, mid-after_deser, end-mid, before_return-end))

return model_string

$$
LANGUAGE plpythonu
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `NO SQL', `');


CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.cnn_keras_merge(
    state1          BYTEA,
    state2          BYTEA
) RETURNS BYTEA AS
$$
import numpy as np
import time
import gc
#import plpy

#merge_start = time.time()

if not state1 or not state2:
#    plpy.info("Returning from merge early","(only 1 state passed)")
    return state1 or state2

split_state1 = filter(None,state1.split('splitter'))
split_state2 = filter(None,state2.split('splitter'))

buffer_count1 = int(state1[0])
buffer_count2 = int(state2[0])

weights1 = [np.fromstring(a,dtype='float32') for a in split_state1[1:]]
weights2 = [np.fromstring(a,dtype='float32') for a in split_state2[1:]]

total_buffers = (buffer_count1 + buffer_count2) * 1.0
merge_weight1 = buffer_count1 / total_buffers
merge_weight2 = buffer_count2 / total_buffers

merged_weights = [(merge_weight1*a)+(merge_weight2*b) for a, b in zip(weights1, weights2)]
model_string = str(total_buffers) + 'splitter'
for a in merged_weights:
    model_string += a.tostring()
    model_string += "splitter"

#merge_finish = time.time()
#plpy.info("cnn_keras_merge time = {}".format(merge_finish-merge_start))

del merged_weights
del merge_weight1
del merge_weight2
del weights1
del weights2
del total_buffers
del split_state1
del split_state2

gc.collect()

return model_string
$$
LANGUAGE plpythonu
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `NO SQL', `');

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.cnn_keras_final(
    state BYTEA
) RETURNS BYTEA AS
$$
import numpy as np
import gc

weights = [np.fromstring(a,dtype='float32') for a in filter(None,state.split('splitter')[1:])]
model_string = ''
for a in weights:
    model_string += a.tostring()
    model_string += "splitter"
del weights
gc.collect()
return model_string
$$
LANGUAGE plpythonu
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `NO SQL', `');

DROP AGGREGATE IF EXISTS MADLIB_SCHEMA.cnn_keras_step(REAL[],
                                                      SMALLINT[],
                                                      INTEGER,
                                                      TEXT,
                                                      BYTEA);
CREATE AGGREGATE MADLIB_SCHEMA.cnn_keras_step(
    /* ind_var */             REAL[],
    /* dep_var */             SMALLINT[],
    /* seg */                 INTEGER,
    /* architecture */        TEXT,
    /* previous_state */      BYTEA
)(
    STYPE=BYTEA,
    SFUNC=MADLIB_SCHEMA.cnn_keras_transition,
    PREFUNC=MADLIB_SCHEMA.cnn_keras_merge,
    FINALFUNC=MADLIB_SCHEMA.cnn_keras_final
);
