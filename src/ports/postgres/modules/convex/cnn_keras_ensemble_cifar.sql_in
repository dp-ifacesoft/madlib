/* ----------------------------------------------------------------------- *//**
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 *
 * @file mlp.sql_in
 *
 * @brief SQL functions for multilayer perceptron
 * @date June 2012
 *
 *
 *//* ----------------------------------------------------------------------- */

m4_include(`SQLCommon.m4')

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.run_keras(
    source_table text,
    test_table text,
    model_table text,
    n_iter  int
)
RETURNS VOID AS $$
    N_ITERATIONS = n_iter

    import plpy
    import keras
    import numpy as np
    import pandas as pd
    import time
    import os
    import sys
    import gc
    import random

    from keras.models import Sequential
    from keras.datasets import mnist, cifar10
    from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, ZeroPadding2D, Activation
    from keras.optimizers import Adam, SGD
    from keras import backend as K
    from keras.regularizers import l2
    from keras.layers import Input
    from keras.applications.imagenet_utils import _obtain_input_shape
    from keras.models import Model
    from keras.models import model_from_json, clone_model
    from keras.callbacks import EarlyStopping

    os.environ['CUDA_VISIBLE_DEVICES'] = '-1'  # to disable GPU

    n_classes = 10

    def deserialize(state, model_shapes):
        weightsList = []
        j = 0
        for a in filter(None, state.split('splitter')[1:]):
            arr = np.fromstring(a, dtype=np.float32)
            weightsList.append(arr.reshape(model_shapes[j]))
            j += 1
        return weightsList

    def deserialize_modelagg(state):
        model_list = state.split('modelsplitarvind')
        return model_list

    def serialized_modelagg(model_list):
        model_list_serialized = ""
        for model in model_list:
            if model_list_serialized:
                model_list_serialized += ("modelsplitarvind" + model)
            else:
                model_list_serialized += model
        return model_list_serialized

    master_model = Sequential()
    master_model.add(Conv2D(32, kernel_size=(3, 3),
        activation='relu',
        input_shape=(32,32,3,)))
    master_model.add(Conv2D(32, kernel_size=(3, 3)))
    master_model.add(MaxPooling2D(pool_size=(2, 2)))
    master_model.add(Dropout(0.25))
    master_model.add(Flatten())
    master_model.add(Dense(n_classes, activation='softmax'))
    master_model.compile(loss='categorical_crossentropy',
        optimizer=Adam(),
        metrics=['accuracy'])

    sql_test_x = """
    SELECT x, y FROM {0} LIMIT 500""".format(test_table)
    plpy.info('Test sql is : {0}'.format(sql_test_x))
    testData = plpy.execute(sql_test_x)
    plpy.info('finished running select query')
    after_select = time.time();

    all_x_test = np.ndarray((0, 500, 32, 32, 3))
    all_y_test = np.ndarray((0, 500))
    for i in range(len(testData)):
        x_test = np.asarray((testData[i]['x'],))
        y_test = np.asarray((testData[i]['y'],))
        if i < 2:
            plpy.info('i : {0}'.format(i))
            plpy.info('X shape : {0}'.format(x_test.shape))
            plpy.info('Y shape : {0}'.format(y_test.shape))
        all_x_test=np.concatenate((all_x_test, x_test))
        all_y_test=np.concatenate((all_y_test, y_test))

    num_test_examples = all_x_test.shape[0]
    all_x_test = all_x_test.reshape(500*num_test_examples, 32,32,3)
    all_x_test = all_x_test.astype('float32')
    all_y_test = all_y_test.reshape(500*num_test_examples)
    plpy.info('X shape : {0}'.format(all_x_test.shape))
    plpy.info('Y shape : {0}'.format(all_y_test.shape))
    all_x_test /= 255.0
    all_y_test = keras.utils.to_categorical(all_y_test,n_classes)

    eval_start = time.time()
    plpy.info("Time to prepare test data = {}".format(eval_start - after_select))
    agg_score = master_model.evaluate(all_x_test, all_y_test,verbose=0)[1]
    eval_time = time.time()
    plpy.info("Time to evaluate model = {0}".format(eval_time-eval_start))
    plpy.info("Accuracy before any training = {0}".format(agg_score))

    agg_scores = []
    model_arch = master_model.to_json()
    sql = """
        SELECT MADLIB_SCHEMA.cnn_keras_step(
            x::REAL[],
            y::SMALLINT[],
            gp_segment_id,
            $MAD${0}$MAD$::text,
            $1
        ) AS keras_model
        FROM {1}
        """.format(model_arch, source_table)
    plpy.info("Model arch size: {}KB".format(len(model_arch)/1024))
    update_plan = plpy.prepare(sql, ["bytea"])
    plpy.info("model arch is in place")

    model_list_serialized = ""
    model_shapes = []
    for i in range(20): # 20 = num segments
        model_string = "0splitter"
        start_time = time.time()
        for a in master_model.get_weights():
            model_string += a.tostring()
            model_string += 'splitter'
            if i == 0:
                model_shapes.append(a.shape)
        if i != 0:
            model_string = "modelsplitarvind" + model_string
        model_list_serialized += model_string
    plpy.info("Model state size: {}MB".format(len(model_list_serialized)/1024/1024))

    start_time = time.time()
    for i in range(N_ITERATIONS):
        iter_start_time = time.time()
        try:
            model_list_serialized = plpy.execute(update_plan, [model_list_serialized])[0]['keras_model']
        except plpy.SPIError as e:
            plpy.notice(e)
            plpy.error('plpy exception')
        iter_endtime = time.time()
        plpy.info('Time for iteration {0}: {1}'.format(i+1, iter_endtime-iter_start_time))

        # Shuffle the model ensemble for next iteration
        model_list = deserialize_modelagg(model_list_serialized)
        weightsList = deserialize(model_list[0], model_shapes)
        random.shuffle(model_list)
        model_list_serialized = serialized_modelagg(model_list)

        # Evaluate the first model
        master_model.set_weights(weightsList)
        agg_score = master_model.evaluate(all_x_test, all_y_test, verbose=0)[1]
        plpy.info("Training categorical accuracy after iteration {0}: {1}".format(i+1, agg_score))
        agg_scores.append(agg_score)

    # Construct, train, test the ensemble
    def get_ensemble_preds(ensemble, x_input):
        ensemble_preds = []
        for model in ensemble:
            prediction = model.predict(x_input, verbose=0).T
            ensemble_preds.append(prediction)
        return np.array(ensemble_preds).T.reshape((x_input.shape[0], 20, n_classes, 1))
    split = int(0.7*all_x_test.shape[0])
    x_train_ensemble = all_x_test[0:split]
    y_train_ensemble = all_y_test[0:split]
    x_test_ensemble = all_x_test[split:]
    y_test_ensemble = all_y_test[split:]
    plpy.info("x train ensemble shape: {}".format(x_train_ensemble.shape))
    plpy.info("x test ensemble shape: {}".format(x_test_ensemble.shape))
    conv_start = time.time()
    model_list = deserialize_modelagg(model_list_serialized)
    ensemble = []
    for model in model_list:
        weightsList = deserialize(model, model_shapes)
        seg_model = clone_model(master_model)
        seg_model.set_weights(weightsList)
        ensemble.append(seg_model)
    ensemble_preds_train = get_ensemble_preds(ensemble, x_train_ensemble)
    ensemble_preds_test = get_ensemble_preds(ensemble, x_test_ensemble)
    conv_ensemble_model = Sequential()
    conv_ensemble_model.add(Conv2D(32, kernel_size=(3, 3),
        activation='relu',
        input_shape=(20, n_classes, 1,)))
    conv_ensemble_model.add(Conv2D(64, (3, 3), activation='relu'))
    conv_ensemble_model.add(MaxPooling2D(pool_size=(2, 2)))
    conv_ensemble_model.add(Dropout(0.55))
    conv_ensemble_model.add(Flatten())
    conv_ensemble_model.add(Dense(64, activation='relu'))
    conv_ensemble_model.add(Dropout(0.55))
    conv_ensemble_model.add(Dense(n_classes, activation='softmax'))
    conv_ensemble_model.compile(loss='categorical_crossentropy',
        optimizer=Adam(),
        metrics=['accuracy'])
    # os.environ['CUDA_VISIBLE_DEVICES'] = '1'
    # device_name = '/gpu:0'
    # config = K.tf.ConfigProto()
    # session = K.tf.Session(config=config)
    # K.set_session(session)
    # with K.tf.device(device_name):
    sess = K.tf.Session(config=K.tf.ConfigProto(log_device_placement=True))
    history = conv_ensemble_model.fit(ensemble_preds_train, y_train_ensemble,
        batch_size=15,
        epochs=80,
        verbose=1,
        callbacks=[EarlyStopping(monitor='loss', patience=10, verbose=0)])
    # for above validation_data=(ensemble_preds_test, y_test_ensemble)
    # with K.tf.device(device_name):
    train_score = conv_ensemble_model.evaluate(ensemble_preds_train, y_train_ensemble)
    test_score = conv_ensemble_model.evaluate(ensemble_preds_test, y_test_ensemble)
    plpy.info("Time for ensemble iteration: {0}".format(time.time() - conv_start))
    plpy.info("Convolutional ensemble train accuracy iteration: {0}".format(train_score[1]))
    plpy.info("Convolutional ensemble test accuracy iteration: {0}".format(test_score[1]))

    plan = plpy.prepare("""
        drop table if exists {0};
        CREATE TABLE {0} AS
        SELECT $1 AS keras_model,
        $2 as accuracy_history
        """.format(model_table), ["text", "DOUBLE PRECISION[]"])
    plpy.execute(plan, [weightsList, agg_scores])


$$ language plpythonu;


CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.cnn_keras_transition(
    state               BYTEA,
    ind_var             REAL[],
    dep_var             SMALLINT[],
    seg                 INTEGER,
    architecture        TEXT,
    previous_state      BYTEA
) RETURNS BYTEA AS
$$

import plpy
import os

gpus_per_host=4
#device_name = '/gpu:{}'.format(seg % gpus_per_host)
device_name = '/gpu:0'

# Don't let tensorflow see anything but the 1 GPU we're supposed to use
os.environ["CUDA_VISIBLE_DEVICES"] = str(seg % gpus_per_host)

import numpy as np
import keras
import time
import gc
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, ZeroPadding2D, Activation
from keras.optimizers import Adam, SGD
from keras.models import model_from_json
from keras import backend as K
from tensorflow.python.client import device_lib

def transition_deserialize(state, model_shapes):
    weightsList = []
    j = 0
    split_state = filter(None, state.split('splitter'))
    for a in split_state[1:]:
        arr = np.fromstring(a, dtype=np.float32)
        weightsList.append(arr.reshape(model_shapes[j]))
        j += 1
    return weightsList

def transition_deserialize_modelagg(model_list, model_shapes):
    weightsList = []
    j = 0
    state = model_list.split("modelsplitarvind")[seg]
    split_state = filter(None, state.split('splitter'))
    for a in split_state[1:]:
        arr = np.fromstring(a, dtype=np.float32)
        weightsList.append(arr.reshape(model_shapes[j]))
        j += 1
    return weightsList

def transition_serialize_modelagg(model_list):
    model_list_serialized = ""
    for model in model_list:
        if model_list_serialized:
            model_list_serialized += ("modelsplitarvind" + model)
        else:
            model_list_serialized += model
    return model_list_serialized

real_start = time.time()
config = K.tf.ConfigProto()
config.gpu_options.allow_growth = False 
#  the following only lets tensorflow/keras see this specific GPU--no "with" contexts needed later
#config.gpu_options.visible_device_list = str(seg % gpus_per_host)
config.gpu_options.per_process_gpu_memory_fraction = 0.9
session = K.tf.Session(config=config)
K.set_session(session)

keras_model = model_from_json(architecture)
model_shapes = []
with K.tf.device(device_name):
    for a in keras_model.get_weights():
        model_shapes.append(a.shape)

start = time.time()
if not state:
    # model needs to be initialized
    serialized_state = previous_state
    weightsList = transition_deserialize_modelagg(serialized_state, model_shapes)
else:
    serialized_state = state
    weightsList = transition_deserialize(serialized_state, model_shapes)

after_deser = time.time()
with K.tf.device(device_name):
    keras_model.set_weights(weightsList)

prep_1 = time.time()  # set weights

# We must run model.compile again, after obtaining the architecutre.
with K.tf.device(device_name):
    keras_model.compile(optimizer=SGD(lr=0.01, decay=1e-6, nesterov=True),
        loss='categorical_crossentropy', metrics=['accuracy'])

prep_3 = time.time() # compile()
if ind_var == None:
    return None
x_train = np.array(ind_var).reshape(len(ind_var), 32,32,3)
# Figure out why this is necessary, but IT IS necessary!
x_train /= 255.0
y_train = np.array(dep_var)
n_classes = 10 
mid = time.time() # convert x,y input to numpy arrays
y_train = keras.utils.to_categorical(y_train,n_classes)

with K.tf.device(device_name):
    keras_model.fit(x_train, y_train,
       batch_size=25,
       epochs=1,
       verbose=0)
end = time.time()

with K.tf.device(device_name):
    weights = keras_model.get_weights()
sess = K.get_session()
K.clear_session()
sess.close()

model_string = '0splitter'
for a in weights:
    model_string += a.tostring()
    model_string += "splitter"

# # Serialize into the ensemble again
# model_list = serialized_state.split("modelsplitarvind")
# model_list[seg] = model_string
# model_list_serialized = transition_serialize_modelagg(model_list)

del keras_model
del weightsList
del x_train
del y_train
del K
del weights
gc.collect()

before_return = time.time()
plpy.info("DeSer ModelArch: {0}, DeSer ModelState: {1}, Prep: {2}, Fit: {3}, Ser ModelState: {4}".format(start-real_start,after_deser-start, mid-after_deser, end-mid, before_return-end))

return model_string

$$
LANGUAGE plpythonu
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `NO SQL', `');


CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.cnn_keras_merge(
    state1          BYTEA,
    state2          BYTEA
) RETURNS BYTEA AS
$$
import numpy as np
import time
#import plpy
#merge_start = time.time()
if not state1 or not state2:
    return state1 or state2
model_string = state1 + "modelsplitarvind" + state2
return model_string
$$
LANGUAGE plpythonu
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `NO SQL', `');

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.cnn_keras_final(
    state BYTEA
) RETURNS BYTEA AS
$$
import numpy as np
import gc
gc.collect()
return state
$$
LANGUAGE plpythonu
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `NO SQL', `');

DROP AGGREGATE IF EXISTS MADLIB_SCHEMA.cnn_keras_step(REAL[],
                                                      SMALLINT[],
                                                      INTEGER,
                                                      TEXT,
                                                      BYTEA);
CREATE AGGREGATE MADLIB_SCHEMA.cnn_keras_step(
    /* ind_var */             REAL[],
    /* dep_var */             SMALLINT[],
    /* seg */                 INTEGER,
    /* architecture */        TEXT,
    /* previous_state */      BYTEA
)(
    STYPE=BYTEA,
    SFUNC=MADLIB_SCHEMA.cnn_keras_transition,
    PREFUNC=MADLIB_SCHEMA.cnn_keras_merge,
    FINALFUNC=MADLIB_SCHEMA.cnn_keras_final
);
