# coding=utf-8
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

import ast
import os

# Do not remove `import keras` although it's not directly used in this file.
# See madlib_keras.py_in for more details
import keras
from keras import backend as K
from keras import utils as keras_utils
from keras.optimizers import *

import keras.optimizers as opt
import keras.losses as losses

import madlib_keras_serializer
from utilities.utilities import _assert

#######################################################################
########### Keras specific functions #####
#######################################################################
def get_device_name_and_set_cuda_env(use_gpu, seg):
    gpus_per_host = 4
    if use_gpu:
        device_name = '/gpu:0'
        os.environ["CUDA_VISIBLE_DEVICES"] = str(seg % gpus_per_host)
    else: # cpu only
        device_name = '/cpu:0'
        os.environ["CUDA_VISIBLE_DEVICES"] = '-1'

    return device_name

def set_keras_session(use_gpu):
    config = K.tf.ConfigProto()
    if use_gpu:
        config.gpu_options.allow_growth = False
        config.gpu_options.per_process_gpu_memory_fraction = 0.9
    session = K.tf.Session(config=config)
    K.set_session(session)

def clear_keras_session():
    sess = K.get_session()
    K.clear_session()
    sess.close()

def compile_and_set_weights(segment_model, compile_params, device_name,
                            previous_state, model_shapes):
    with K.tf.device(device_name):
        compile_model(segment_model, compile_params)
        _, _, _, model_weights = madlib_keras_serializer.deserialize_weights(
            previous_state, model_shapes)
        segment_model.set_weights(model_weights)

"""
Used to convert compile_params and fit_params to actual argument dictionaries
"""

def convert_string_of_args_to_dict(str_of_args):
    """Uses parenthases matching algorithm to intelligently convert
    a string with valid python code into an argument dictionary"""
    stack = []
    dual = {
        '(' : ')',
        '[' : ']',
        '{' : '}',
    }
    result_str = ""
    key_str = ""
    compile_dict = {}
    for char in str_of_args:
        if char in dual.keys():
            stack.append(char)
            result_str += char
        elif char in dual.values() and stack:
            if dual[stack[-1]] == char:
                stack.pop(-1)
            result_str += char
        elif not stack and char == "=":
            key_str = result_str
            result_str = ""
        elif not stack and char == ",":
            value_str = result_str
            result_str = ""
            compile_dict[key_str.strip()]=value_str.strip('\'')
        else:
            result_str += char
    value_str = result_str
    compile_dict[key_str.strip()]=value_str.strip('\'')
    return compile_dict

# Parse the compile parameters and the optimizer.
def parse_compile_params(str_of_args):
    """
    Args:
        @param: str_of_args     The string of arguments given by the user
    Returns:
        opt_name:               Name of the optimizer
        opt_args:               Arguments for the optimizer
        compile_dict:           Dictionary of arguments for keras.compile
    """

    compile_dict = convert_string_of_args_to_dict(str_of_args)

    opt_name,opt_args = parse_optimizer(compile_dict)
    compile_dict['loss'] = parse_loss(compile_dict)

    compile_dict['metrics'] = ast.literal_eval(compile_dict['metrics']) if 'metrics' in compile_dict.keys() else None
    compile_dict['loss_weights'] = ast.literal_eval(compile_dict['loss_weights']) if 'loss_weights' in compile_dict.keys() else None

    return (opt_name,opt_args,compile_dict)

# Parse the optimizer name and params.
def parse_optimizer(compile_dict):
    """
    Args:
        @param: compile_dict    Dictionary of arguments for keras.compile
    Returns:
        opt_name:               Name of the optimizer
        opt_args:               Arguments for the optimizer
    """
    opt_split = compile_dict['optimizer'].split('(')
    opt_name = opt_split[0]
    optimizers = get_optimizers()
    _assert(opt_name in optimizers,
            "model_keras error: invalid optimizer name: {0}".format(opt_name))

    # If we use only the optimizer name
    if len(opt_split) == 1:
        final_args = None
    # If we use optimizer object with no params
    elif opt_split[1] == ')':
        final_args = None
    # If we give parameters to the optimizer
    else:
        opt_params = opt_split[1][:-1]
        opt_params_array = opt_params.split(',')
        opt_params_clean = map(split_and_strip, opt_params_array)
        key_value_params = { x[0] : x[1] for x in opt_params_clean}

        final_args = {}
        for key,value in key_value_params.iteritems():
            if value == 'None':
                final_args[key] = None
            elif value == 'True' or value == 'False':
                final_args[key] = bool(value)
            else:
                final_args[key] = float(value)
    return (opt_name,final_args)

# Parse the loss function.
def parse_loss(compile_dict):
    loss_split = compile_dict['loss'].split('.')
    if (len(loss_split) == 2 and
        loss_split[0] == 'losses' and
        loss_split[1] in dir(losses)):
        return eval('losses.'+loss_split[1])
    return compile_dict['loss']

# Parse the fit parameters into a dictionary.
def parse_fit_params(str_of_args):
    compile_dict = convert_string_of_args_to_dict(str_of_args)
    for key in compile_dict.keys():
        compile_dict[key] = ast.literal_eval(compile_dict[key])
    return compile_dict

# Split and strip the whitespace of key=value formatted strings
def split_and_strip(x):
    y = x.split('=')
    return (y[0].strip(),y[1].strip())

# Return the list of keras optimizers
def get_optimizers():
    optimizers = dict()
    names = dir(opt)
    for n in names:
        optimizer = eval('opt.' + n)
        if optimizer.__class__ == type and optimizer.__base__ == opt.Optimizer:
            optimizers[n] = optimizer
    return optimizers

# Run the keras.compile with the given parameters
def compile_model(model, compile_params):
    optimizers = get_optimizers()
    (opt_name,final_args,compile_dict) = parse_compile_params(compile_params)
    optimizer = optimizers[opt_name](**final_args) if final_args else opt_name
    model.compile(optimizer=optimizer,
                  loss=compile_dict['loss'],
                  metrics=compile_dict['metrics'])
