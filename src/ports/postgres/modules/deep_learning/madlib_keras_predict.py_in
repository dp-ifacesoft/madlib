# coding=utf-8
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

import plpy
import os

import keras
from keras import backend as K
from keras.layers import *
from keras.models import *
from keras.optimizers import *

from madlib_keras_helper import *
from madlib_keras_validator import PredictInputValidator
from predict_input_params import PredictParamsProcessor
from utilities.control import MinWarning
from utilities.model_arch_info import get_input_shape
from utilities.utilities import add_postfix
from utilities.utilities import create_cols_from_array_sql_string
from utilities.utilities import get_segments_per_host
from utilities.utilities import is_platform_pg
from utilities.utilities import unique_string

from madlib_keras_wrapper import *

MODULE_NAME = 'madlib_keras_predict'

@MinWarning("warning")
def predict(schema_madlib, model_table, test_table, id_col,
            independent_varname, output_table, pred_type, gpus_per_host, **kwargs):
    if not pred_type:
        pred_type = 'response'
    input_validator = PredictInputValidator(
        test_table, model_table, id_col, independent_varname,
        output_table, pred_type, MODULE_NAME)

    param_proc = PredictParamsProcessor(model_table, MODULE_NAME)
    class_values = param_proc.get_class_values()
    input_validator.validate_pred_type(class_values)
    dependent_varname = param_proc.get_dependent_varname()
    dependent_vartype = param_proc.get_dependent_vartype()
    model_data = param_proc.get_model_data()
    model_arch = param_proc.get_model_arch()
    normalizing_const = param_proc.get_normalizing_const()
    input_shape = get_input_shape(model_arch)
    input_validator.validate_input_shape(input_shape)

    is_response = True if pred_type == 'response' else False
    intermediate_col = unique_string()
    if is_response:
        pred_col_name = add_postfix("estimated_", dependent_varname)
        pred_col_type = dependent_vartype
    else:
        pred_col_name = "prob"
        pred_col_type = 'double precision'

    class_values = strip_trailing_nulls_from_class_values(class_values)

    prediction_select_clause = create_cols_from_array_sql_string(
        class_values, intermediate_col, pred_col_name,
        pred_col_type, is_response, MODULE_NAME)

    gp_segment_id_col, seg_ids_test, \
    images_per_seg_test = get_image_count_per_seg_for_non_minibatched_data_from_db(test_table)
    segments_per_host = get_segments_per_host()

    predict_query = plpy.prepare("""
        CREATE TABLE {output_table} AS
        SELECT {id_col}, {prediction_select_clause}
        FROM (
            SELECT {test_table}.{id_col},
                   ({schema_madlib}.internal_keras_predict
                       ({independent_varname},
                        $1,
                        $2,
                        {is_response},
                        {normalizing_const},
                        {gp_segment_id_col},
                        ARRAY{seg_ids_test},
                        ARRAY{images_per_seg_test},
                        {gpus_per_host},
                        {segments_per_host})
                   ) AS {intermediate_col}
        FROM {test_table}
        ) q
        """.format(**locals()), ["text", "bytea"])
    plpy.execute(predict_query, [model_arch, model_data])


def internal_keras_predict(independent_var, model_architecture, model_data,
                           is_response, normalizing_const, current_seg_id, seg_ids,
                           images_per_seg, gpus_per_host, segments_per_host,
                           **kwargs):
    SD = kwargs['SD']
    model_key = 'segment_model_predict'
    row_count_key = 'row_count'
    try:
        device_name = get_device_name_and_set_cuda_env(gpus_per_host,
                                                       current_seg_id)
        if model_key not in SD:
            set_keras_session(device_name, gpus_per_host, segments_per_host)
            model = model_from_json(model_architecture)
            model_shapes = get_model_shapes(model)
            set_model_weights(model, device_name, model_data, model_shapes)

            SD[model_key] = model
            SD[row_count_key] = 0
        else:
            model = SD[model_key]
        SD[row_count_key] += 1

        # Since the test data isn't mini-batched,
        # we have to make sure that the test data np array has the same
        # number of dimensions as input_shape. So we add a dimension to x.
        independent_var = expand_input_dims(independent_var)
        independent_var /= normalizing_const

        if is_response:
            with K.tf.device(device_name):
                y_prob = model.predict(independent_var)
                proba_argmax = y_prob.argmax(axis=-1)
            # proba_argmax is a list with exactly one element in it. That element
            # refers to the index containing the largest probability value in the
            # output of Keras' predict function.
            result = proba_argmax
        else:
            with K.tf.device(device_name):
                probs = model.predict(independent_var)
            # probs is a list containing a list of probability values, of all
            # class levels. Since we are assuming each input is a single image,
            # and not mini-batched, this list contains exactly one list in it,
            # so return back the first list in probs.
            result = probs[0]
        total_images = get_image_count_per_seg_from_array(current_seg_id, seg_ids,
                                                          images_per_seg)

        if SD[row_count_key] == total_images:
            SD.pop(model_key, None)
            SD.pop(row_count_key, None)
            clear_keras_session()
        return result
    except Exception as ex:
        SD.pop(model_key, None)
        SD.pop(row_count_key, None)
        clear_keras_session()
        plpy.error(ex)


def predict_help(schema_madlib, message, **kwargs):
    """
    Help function for keras predict

    Args:
        @param schema_madlib
        @param message: string, Help message string
        @param kwargs

    Returns:
        String. Help/usage information
    """
    if not message:
        help_string = """
-----------------------------------------------------------------------
                            SUMMARY
-----------------------------------------------------------------------
This function allows the user to predict using a madlib_keras_fit trained
model.

For more details on function usage:
    SELECT {schema_madlib}.madlib_keras_predict('usage')
            """
    elif message in ['usage', 'help', '?']:
        help_string = """
-----------------------------------------------------------------------
                            USAGE
-----------------------------------------------------------------------
 SELECT {schema_madlib}.madlib_keras_predict(
    model_table,    --  Name of the table containing the model
    test_table,     --  Name of the table containing the evaluation dataset
    id_col,         --  Name of the id column in the test data table
    independent_varname,    --  Name of the column with independent
                                variables in the test table
    output_table,   --  Name of the output table
    pred_type,      --  The type of the desired output
    gpus_per_host   --  Number of GPUs per segment host to
                        be used for training
    )
 );

-----------------------------------------------------------------------
                            OUTPUT
-----------------------------------------------------------------------
The output table ('output_table' above) contains the following columns:

id:                 Gives the 'id' for each prediction, corresponding
                    to each row from the test_table.
estimated_COL_NAME: (For pred_type='response') The estimated class for
                    classification, where COL_NAME is the name of the
                    column to be predicted from test data.
prob_CLASS:         (For pred_type='prob' for classification) The
                    probability of a given class. There will be one
                    column for each class in the training data.
"""
    else:
        help_string = "No such option. Use {schema_madlib}.madlib_keras_predict()"

    return help_string.format(schema_madlib=schema_madlib)
# ---------------------------------------------------------------------
