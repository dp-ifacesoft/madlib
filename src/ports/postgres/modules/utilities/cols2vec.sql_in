/* ----------------------------------------------------------------------- *//**
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 *//* ----------------------------------------------------------------------- */
 
/* ----------------------------------------------------------------------- *//**
*
*file cols2vec.sql_in
*
*brief A set of utilities to ease basic table transformations (such as *aggregating multiple columns in an array)
*
*
*//* ----------------------------------------------------------------------- */
 m4_include(`SQLCommon.m4')


/**
@addtogroup grp_cols2vec

@brief Create a new table with all feature columns inserted into a single column as an array

<div class="toc"><b>Contents</b>
<ul>
<li class="level1"><a href="#cols2vec_syntax">Syntax</a>
<li class="level1"><a href="#cols2vec_usage">Usage</a>
<li class="level1"><a href="#cols2vec_example">Example</a>
</ul>
</div>

@about
Convert all feature columns in your table into an array in a single column.

Given a table with varying number of columns, this function will create an output table that will contain the feature columns into an array. A summry table will be created and will the names
of the features into array so that this process can be reversed using the function
vec2cols from array_utilities in PDLTools.

The columns that need NOT be included in the feature array need to be specified in the exclude_columns field.

@anchor cols2vec_usage
@usage

<pre class="syntax">
cols2vec(
    source_table ,
    output_table ,
    list_of_features,
    list_of_features_to_exclude ,
    cols_to_output  
) 
</pre>

\b Arguments
<dl class="arglist">
<dt>source_table</dt>
<dd>TEXT. Name of the table containing the source data.</tt>.

<dt>output_table</dt>
<dd>TEXT. Name of the generated table containing the output.</tt>

<dt>list_of_features</dt>
<dd>TEXT. Comma-separated string of column names or expressions to put into feature array. Can also be a '*' implying all columns are to be put into feature array (except for the ones included in the next argument that lists exclusions). Array columns in the source table are not supported in the 'list_of_features'. </tt>

<dt>list_of_features_to_exclude</dt>
<dd>TEXT. Default NULL. Comma-separated string of column names to exclude from the feature array.  Use only when 'list_of_features' is '*'. </tt>

<dt>cols_to_output</dt>
<dd>TEXT. Default NULL. Comma-separated string of column names from the source table to keep in the output table, in addition to the feature array.  To keep all columns from the source table, use '*'. </tt>

</dd>


@anchor cols2vec_example
@examp

<pre class="syntax">

DROP TABLE IF EXISTS cols2vec;
CREATE TABLE cols2vec (
    id              bigint,
    label           int,
    feat1           int,
    feat2           int,
    feat3           float,
    other_col       float
);

INSERT INTO cols2vec  VALUES
(1, 0, 1, 1, 0.5, 0.9),
(2, 1, 0, 1, 0.3, 0.3),
(3, 0, 0, 0, 0.1, 1.1),
(4, 1, 1, 0, 0.9, 0.4);


<pre>

<pre class="syntax">
drop table if exists cols2vec_result;
drop table if exists cols2vec_result_summary;


select cols2vec(
      'cols2vec',                  -- input table
      'cols2vec_result',		       -- Output table
      'feat1,feat2,feat3',         -- Comma Seperated List of Features
      'id',                        --  Features To Exclude
      'id,label'	 			           -- Output columns to be included in
      								                output table
);

select * from cols2vec_result;
</pre>


-# Expected output:

<pre class="result">
select * from cols2vec_result;

 id | label | feature_vector 
----+-------+----------------
  1 |     0 | {1,1,0.5}
  2 |     1 | {0,1,0.3}
  3 |     0 | {0,0,0.1}
  4 |     1 | {1,0,0.9}
(4 rows)

select * from cols2vec_result_summary;
    feature_names    
---------------------
 {feat1,feat2,feat3}
 {feat1,feat2,feat3}
 {feat1,feat2,feat3}
 {feat1,feat2,feat3}
(4 rows)

</pre>


<pre class="syntax">
</pre>
*/


CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.cols2vec(
    source_table VARCHAR,
    output_table VARCHAR,
    list_of_features VARCHAR,
    list_of_features_to_exclude VARCHAR,
    cols_to_output VARCHAR 
) RETURNS void AS $$
    PythonFunction(cols_vec, cols2vec, cols2vec)
$$ LANGUAGE plpythonu VOLATILE
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `MODIFIES SQL DATA', `');    


CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.cols2vec(
    source_table VARCHAR,
    output_table VARCHAR,
    list_of_features VARCHAR,
    list_of_features_to_exclude VARCHAR
) RETURNS void AS $$
SELECT MADLIB_SCHEMA.cols2vec($1,$2,$3,$4,NULL)

$$ LANGUAGE SQL
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `MODIFIES SQL DATA', `');

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.cols2vec(
    source_table VARCHAR,
    output_table VARCHAR,
    list_of_features VARCHAR
) RETURNS void AS $$
SELECT MADLIB_SCHEMA.cols2vec($1,$2,$3,NULL,NULL)

$$ LANGUAGE SQL
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `MODIFIES SQL DATA', `');
