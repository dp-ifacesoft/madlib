/* ----------------------------------------------------------------------- */
/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 *
 * @file cols2vec.sql_in
 * @brief A set of utilities to ease basic table transformations
 *  (such as *aggregating multiple columns in an array)
 * @date July 2018
 *
 */
/* ----------------------------------------------------------------------- */

m4_include(`SQLCommon.m4')


/**
@addtogroup grp_cols2vec

@brief Create a new table with all feature columns inserted into a single column as an array

<div class="toc"><b>Contents</b>
<ul>
<li class="level1"><a href="#cols2vec_syntax">Syntax</a>
<li class="level1"><a href="#cols2vec_usage">Usage</a>
<li class="level1"><a href="#cols2vec_example">Example</a>
</ul>
</div>

@about
Convert feature columns in a table into an array in a single column.

Given a table with a number of feature columns, this function will create an
output table that contains the feature columns in an array. A summary
table will also be created that contains the names of the features combined into
array, so that this process can be reversed using the function vec2cols.

@anchor cols2vec_usage
@usage

<pre class="syntax">
cols2vec(
    source_table,
    output_table,
    list_of_features,
    list_of_features_to_exclude,
    cols_to_output
)
</pre>

\b Arguments
<dl class="arglist">
<dt>source_table</dt>
<dd>TEXT. Name of the table containing the source data.</dd>.

<dt>output_table</dt>
<dd>TEXT. Name of the generated table containing the output.</dd>

<dt>list_of_features</dt>
<dd>TEXT.
Comma-separated string of column names or expressions to put into feature array.
Can also be a '*' implying all columns are to be put into feature array (except
for the ones included in the next argument that lists exclusions). Array columns
in the source table are not supported in the 'list_of_features' parameter. </dd>

<dt>list_of_features_to_exclude (optional)</dt>
<dd>TEXT. Default NULL.
Comma-separated string of column names to exclude from the feature array.  Use
only when 'list_of_features' is '*'. </dd>

<dt>cols_to_output (optional)</dt>
<dd>TEXT. Default NULL.
Comma-separated string of column names from the source table to keep in the
output table, in addition to the feature array.  To keep all columns from the
source table, use '*' for this parameter. </dd>

</dl>

@anchor cols2vec_example
@par Examples

-# Load sample data:
<pre class="example">
DROP TABLE IF EXISTS cols2vec;
CREATE TABLE cols2vec (
    id              bigint,
    label           int,
    feat1           int,
    feat2           int,
    feat3           float,
    other_col       float
);
INSERT INTO cols2vec  VALUES
(1, 0, 1, 1, 0.5, 0.9),
(2, 1, 0, 1, 0.3, 0.3),
(3, 0, 0, 0, 0.1, 1.1),
(4, 1, 1, 0, 0.9, 0.4);
</pre>

-# Create feature array:
<pre class="example">
DROP TABLE IF EXISTS cols2vec_result, cols2vec_result_summary;
SELECT madlib.cols2vec(
      'cols2vec',               -- input table
      'cols2vec_result',        -- output table
      'feat1,feat2,feat3',      -- list of features
       NULL,                    -- features to exclude
      'id, label           '    -- columns from input table to be included in output
);
SELECT * FROM cols2vec_result ORDER BY id;
</pre>
<pre class="result">
 id | label | feature_vector 
----+-------+----------------
  1 |     0 | {1,1,0.5}
  2 |     1 | {0,1,0.3}
  3 |     0 | {0,0,0.1}
  4 |     1 | {1,0,0.9}
(4 rows)
</pre>
View summary table:
<pre class="example">
SELECT * FROM cols2vec_result_summary;
</pre>
<pre class="result">
 source_table | list_of_features  | list_of_features_to_exclude |    feature_names    
--------------+-------------------+-----------------------------+---------------------
 cols2vec     | feat1,feat2,feat3 | None                        | {feat1,feat2,feat3}
</pre>

-# The above result could be obtained in a similar way using the 'features_to_exclude' parameter:
<pre class="example">
DROP TABLE IF EXISTS cols2vec_result, cols2vec_result_summary;
SELECT madlib.cols2vec(
      'cols2vec',               -- input table
      'cols2vec_result',        -- output table
      '*',                      -- list of features
      'id, label, other_col',   -- features to exclude
      'id, label'               -- columns from input table to be included in output
);
SELECT * FROM cols2vec_result ORDER BY id;
</pre>
<pre class="result">
 id | label | feature_vector 
----+-------+----------------
  1 |     0 | {1,1,0.5}
  2 |     1 | {0,1,0.3}
  3 |     0 | {0,0,0.1}
  4 |     1 | {1,0,0.9}
(4 rows)
</pre>
View summary table:
<pre class="example">
SELECT * FROM cols2vec_result_summary;
</pre>
<pre class="result">
 source_table | list_of_features | list_of_features_to_exclude |    feature_names    
--------------+------------------+-----------------------------+---------------------
 cols2vec     | *                | id, label, other_col        | {feat1,feat2,feat3}
</pre>
*/


CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.cols2vec(
    source_table VARCHAR,
    output_table VARCHAR,
    list_of_features VARCHAR,
    list_of_features_to_exclude VARCHAR,
    cols_to_output VARCHAR
) RETURNS void AS $$
    PythonFunction(utilities, cols2vec, cols2vec)
$$ LANGUAGE plpythonu VOLATILE
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `MODIFIES SQL DATA', `');


CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.cols2vec(
    source_table VARCHAR,
    output_table VARCHAR,
    list_of_features VARCHAR,
    list_of_features_to_exclude VARCHAR
) RETURNS void AS $$
    SELECT MADLIB_SCHEMA.cols2vec($1, $2, $3, $4, NULL)
$$ LANGUAGE SQL
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `MODIFIES SQL DATA', `');

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.cols2vec(
    source_table VARCHAR,
    output_table VARCHAR,
    list_of_features VARCHAR
) RETURNS void AS $$
    SELECT MADLIB_SCHEMA.cols2vec($1, $2, $3, NULL, NULL)
$$ LANGUAGE SQL
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `MODIFIES SQL DATA', `');
