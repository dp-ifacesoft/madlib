# coding=utf-8
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.


"""
@file minibatch_preprocessing.py_in

"""
from math import ceil
import plpy

from internal.db_utils import get_distinct_col_levels
from internal.db_utils import get_one_hot_encoded_expr
from utilities import add_postfix
from utilities import _assert
from utilities import get_seg_number
from utilities import is_platform_pg
from utilities import is_psql_boolean_type
from utilities import is_psql_char_type
from utilities import is_psql_int_type
from utilities import is_valid_psql_type
from utilities import py_list_to_sql_string
from utilities import split_quoted_delimited_str
from utilities import unique_string
from utilities import validate_module_input_params
from utilities import NUMERIC, INTEGER, TEXT, BOOLEAN, INCLUDE_ARRAY

from mean_std_dev_calculator import MeanStdDevCalculator
from validate_args import get_expr_type
from validate_args import _tbl_dimension_rownum

m4_changequote(`<!', `!>')

# These are readonly variables, do not modify
MINIBATCH_OUTPUT_DEPENDENT_COLNAME = "dependent_varname"
MINIBATCH_OUTPUT_INDEPENDENT_COLNAME = "independent_varname"

class Dbscan:
    def __init__(self, schema_madlib, source_table, output_table,
                     eps, min_samples, fn_dist, algorithm, grouping_cols, **kwargs):
            self.schema_madlib = schema_madlib
            self.source_table = source_table
            self.output_table = output_table
            self.eps = eps
            self.min_samples = min_samples
            self.fn_dist = fn_dist
            self.algorithm = algorithm
            self.grouping_cols = grouping_cols

    def dbscan(self):
        query = """select id from {0}
        """.format(self.source_table)
        result = plpy.execute(query)

        result_dict = {}

        for row in result:
            result_dict[row['id']] = row['id']

        self.gen_output_table(result_dict)


    def gen_output_table(self, result_dict):
        query = """drop table if exists {0}; \
        create table {0} (id int, cluster_id int);""".format(self.output_table)
        plpy.execute(query)

        #result_dict = {1:1, 2:1, 3:4, 4:2, 5:2, 6:4}

        entry_string = ""

        for entry in result_dict:
            entry_string += ("("+ str(entry) + ", " + str(result_dict[entry]) + "),")
        entry_string = entry_string[:-1]

        insert_stmt = """insert into {0} values {1};
            """.format(self.output_table, entry_string)
        plpy.info(insert_stmt)
        plpy.execute(insert_stmt)

# ---------------------------------------------------------------------
